import { useState, useEffect } from "react";
import { ethers } from "ethers";
import atm_abi from "../artifacts/contracts/Assessment.sol/Assessment.json";

export default function HomePage() {
  const [ethWallet, setEthWallet] = useState(undefined);
  const [account, setAccount] = useState(undefined);
  const [atm, setATM] = useState(undefined);
  const [balance, setBalance] = useState(undefined);
  const [transactionHistory, setTransactionHistory] = useState([]);
  const [name, setName] = useState("");
  const [bankNumber, setBankNumber] = useState("");
  const [birthdate, setBirthdate] = useState("");
  const [userDetailsSubmitted, setUserDetailsSubmitted] = useState(false);
  const [metaMaskInfo, setMetaMaskInfo] = useState("");

  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
  const atmABI = atm_abi.abi;

  const getWallet = async () => {
    if (window.ethereum) {
      setEthWallet(window.ethereum);
    }

    if (ethWallet) {
      const account = await ethWallet.request({ method: "eth_accounts" });
      handleAccount(account);
    }
  };

  const handleAccount = (account) => {
    if (account) {
      console.log("Account connected: ", account);
      setAccount(account[0]);
    } else {
      console.log("No account found");
    }
  };

  const connectAccount = async () => {
    if (!ethWallet) {
      alert('MetaMask wallet is required to connect');
      return;
    }

    const accounts = await ethWallet.request({ method: 'eth_requestAccounts' });
    handleAccount(accounts);

    // once wallet is set we can get a reference to our deployed contract
    getATMContract();
  };

  const getATMContract = () => {
    const provider = new ethers.providers.Web3Provider(ethWallet);
    const signer = provider.getSigner();
    const atmContract = new ethers.Contract(contractAddress, atmABI, signer);

    setATM(atmContract);
  };

  const getBalance = async () => {
    if (atm) {
      setBalance((await atm.getBalance()).toNumber());
    }
  };

  const logTransaction = (type, amount, txHash) => {
    const newTransaction = {
      type,
      amount,
      txHash,
      timestamp: new Date().toLocaleString()
    };
    setTransactionHistory([...transactionHistory, newTransaction]);
  };

  const deposit = async () => {
    if (atm) {
      let tx = await atm.deposit(1);
      await tx.wait();
      getBalance();
      logTransaction('Deposit', 1, tx.hash);
    }
  };

  const withdraw = async () => {
    if (atm) {
      let tx = await atm.withdraw(1);
      await tx.wait();
      getBalance();
      logTransaction('Withdraw', 1, tx.hash);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setUserDetailsSubmitted(true);
    connectAccount();
  };

  const displayMetaMaskInfo = () => {
    if (window.ethereum) {
      const metaMaskVersion = window.ethereum.isMetaMask ? window.ethereum.version : '';
      setMetaMaskInfo(`MetaMask is a cryptocurrency wallet that allows users to interact with the Ethereum blockchain. It is owned by ConsenSys.${metaMaskVersion ? ` MetaMask Version: ${metaMaskVersion}` : ''}`);
    } else {
      setMetaMaskInfo('MetaMask is not installed');
    }
  };

  const openHelpAndSafety = () => {
    // You can replace this with any relevant URL or action you want to perform
    window.open('https://metamask.io/security.html', '_blank');
  };

  const initUser = () => {
    // Check to see if user has Metamask
    if (!ethWallet) {
      return <p>Please install Metamask in order to use this ATM.</p>
    }

    // Check to see if user is connected. If not, connect to their account
    if (!account) {
      return (
        <form onSubmit={handleSubmit}>
          <div>
            <label>Name:</label>
            <input type="text" value={name} onChange={(e) => setName(e.target.value)} required />
          </div>
          <div>
            <label>Bank Number:</label>
            <input type="text" value={bankNumber} onChange={(e) => setBankNumber(e.target.value)} required />
          </div>
          <div>
            <label>Birthdate:</label>
            <input type="date" value={birthdate} onChange={(e) => setBirthdate(e.target.value)} required />
          </div>
          <button type="submit">Please connect your Metamask wallet</button>
        </form>
      )
    }

    if (balance === undefined) {
      getBalance();
    }

    return (
      <div>
        <p>Your Account: {account}</p>
        <p>Your Name: {name}</p>
        <p>Your Bank Number: {bankNumber}</p>
        <p>Your Birthdate: {birthdate}</p>
        <p>Your Balance: {balance}</p>
        <button onClick={deposit}>Deposit 1 ETH</button>
        <button onClick={withdraw}>Withdraw 1 ETH</button>
        <h2>Transaction History</h2>
        <ul>
          {transactionHistory.map((tx, index) => (
            <li key={index}>
              <p>Type: {tx.type}</p>
              <p>Amount: {tx.amount} ETH</p>
              <p>Transaction Hash: {tx.txHash}</p>
              <p>Timestamp: {tx.timestamp}</p>
            </li>
          ))}
        </ul>
        <button onClick={computeTransactionCount}>Compute Transaction Count</button>
        <button onClick={displayMetaMaskInfo}>Show MetaMask Info</button>
        <button onClick={openHelpAndSafety}>Help and Safety</button>
        {metaMaskInfo && <p>{metaMaskInfo}</p>}
      </div>
    )
  };

  const computeTransactionCount = () => {
    const count = transactionHistory.length;
    alert(`Total Transactions: ${count}`);
  };

  useEffect(() => { getWallet(); }, []);

  return (
    <main className="container">
      <header><h1>Welcome to the Metacrafters ATM!</h1></header>
      {initUser()}
      <style jsx>{`
        .container {
          text-align: center
        }
      `}
      </style>
    </main>
  )
}
